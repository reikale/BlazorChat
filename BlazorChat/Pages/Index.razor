@page "/"
@using Microsoft.AspNetCore.SignalR.Client;
@using Models;
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@*Incomming message:*@
<div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded" style="height:500px;">
    @if (!userMessages.Any())
    {
        <p>No messages to display</p>
    }
    @foreach(var userMessage in userMessages)
    {
        @if (userMessage.CurrentUser)
        {
            <div class="row mb-3 d-flex currentUserBox justify-content-end">
            <div class="card shadow mr-5 currentUserBox bg-secondary" style="width:18rem;">
               
                <ul class="list-group list-group-flush">
                    <li class="list-group-item currentUserBox bg-secondary">
                        <strong>
                            You :
                        </strong>
                            @userMessage.Message</li>
                </ul>
                <div class="card-footer">
                    <span class="small">@userMessage.DateSent.ToShortTimeString()</span>
                </div>
            </div>
            </div>
        }
        else
        {
            <div class="row mb-3 d-flex">
            <div class="card shadow mr-5" style="width:18rem;">
               
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        <strong>
                            @userMessage.UserName :
                        </strong>
                            @userMessage.Message</li>
                </ul>
                <div class="card-footer">
                    <span class="small">@userMessage.DateSent.ToShortTimeString()</span>
                </div>
            </div>
        </div>
        }



    }
</div>

@*Message that user is typing:*@
<div class="container">
    <div class="row">
        <div class="col-3">
            <input @bind="usernameInput" type="text" class="form-control" placeholder="Your name" readonly="@isUserReadOnly"/>
        </div>
        <div class="col-6">
            <textarea @bind="messageInput" class="form-control" placeholder="Your message..."></textarea>
        </div>
        <div class="col-3">
            <button type="button" @onclick="Send" class="btn btn-primary">Send</button>
        </div>
    </div>
</div>

@code{
    private HubConnection hubConnection;
    private List<UserMessage> userMessages = new();
    private string usernameInput;
    private string messageInput;
    private bool isUserReadOnly = false;

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            userMessages.Add(new UserMessage { UserName = user, Message = message, CurrentUser = user == usernameInput, DateSent = DateTime.Now });
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(usernameInput) && !string.IsNullOrEmpty(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", usernameInput, messageInput);
            isUserReadOnly = true;
            messageInput = string.Empty;
        };
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}